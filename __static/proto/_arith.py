
from glite import __common

_T = __common.T



# Standard

@__common.t.runtime_checkable
class SupportsAdd(__common.t.Protocol[_T]):
    def __add__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsSub(__common.t.Protocol[_T]):
    def __sub__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsAddSub(__common.t.Protocol[_T]):
    def __add__(self, /, other): ...
    def __sub__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsMul(__common.t.Protocol[_T]):
    def __mul__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsTruediv(__common.t.Protocol[_T]):
    def __truediv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsFloordiv(__common.t.Protocol[_T]):
    def __floordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsTruedivFloordiv(__common.t.Protocol[_T]):
    def __truediv__(self, /, other): ...
    def __floordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsMulTruedivFloordiv(__common.t.Protocol[_T]):
    def __mul__(self, /, other): ...
    def __truediv__(self, /, other): ...
    def __floordiv__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsMod(__common.t.Protocol[_T]):
    def __mod__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsDivmod(__common.t.Protocol[_T]):
    def __divmod__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsModDivmod(__common.t.Protocol[_T]):
    def __mod__(self, /, other): ...
    def __divmod__(self, /, other): ...



# Augmented

@__common.t.runtime_checkable
class SupportsIAdd(__common.t.Protocol[_T]):
    def __iadd__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsISub(__common.t.Protocol[_T]):
    def __isub__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsIAddISub(__common.t.Protocol[_T]):
    def __iadd__(self, /, other): ...
    def __isub__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsIMul(__common.t.Protocol[_T]):
    def __imul__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsITruediv(__common.t.Protocol[_T]):
    def __itruediv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsIFloordiv(__common.t.Protocol[_T]):
    def __ifloordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsITruedivIFloordiv(__common.t.Protocol[_T]):
    def __itruediv__(self, /, other): ...
    def __ifloordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsIMulITruedivIFloordiv(__common.t.Protocol[_T]):
    def __imul__(self, /, other): ...
    def __itruediv__(self, /, other): ...
    def __ifloordiv__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsIMod(__common.t.Protocol[_T]):
    def __imod__(self, /, other): ...



# __r*__

@__common.t.runtime_checkable
class SupportsRAdd(__common.t.Protocol[_T]):
    def __radd__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRSub(__common.t.Protocol[_T]):
    def __rsub__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRAddRSub(__common.t.Protocol[_T]):
    def __radd__(self, /, other): ...
    def __rsub__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsRMul(__common.t.Protocol[_T]):
    def __rmul__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRTruediv(__common.t.Protocol[_T]):
    def __rtruediv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRFloordiv(__common.t.Protocol[_T]):
    def __rfloordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRTruedivRFloordiv(__common.t.Protocol[_T]):
    def __rtruediv__(self, /, other): ...
    def __rfloordiv__(self, /, other): ...
@__common.t.runtime_checkable
class SupportsRMulRTruedivRFloordiv(__common.t.Protocol[_T]):
    def __rmul__(self, /, other): ...
    def __rtruediv__(self, /, other): ...
    def __rfloordiv__(self, /, other): ...

@__common.t.runtime_checkable
class SupportsRMod(__common.t.Protocol[_T]):
    def __rmod__(self, /, other): ...
