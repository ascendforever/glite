
from gll.__common import __common

_T = __common.T

@__common.t.runtime_checkable
class SupportsGreaterThan(__common.t.Protocol[_T]):
    def __gt__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsLessThan(__common.t.Protocol[_T]):
    def __lt__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsLtGt(__common.t.Protocol[_T]):
    def __gt__(self, /, other) -> bool: ...
    def __lt__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsGreaterThanOrEqualTo(__common.t.Protocol[_T]):
    def __ge__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsLessThanOrEqualTo(__common.t.Protocol[_T]):
    def __le__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsLeGe(__common.t.Protocol[_T]):
    def __ge__(self, /, other) -> bool: ...
    def __le__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsGtLtGeLe(__common.t.Protocol[_T]):
    def __gt__(self, /, other) -> bool: ...
    def __lt__(self, /, other) -> bool: ...
    def __ge__(self, /, other) -> bool: ...
    def __le__(self, /, other) -> bool: ...

@__common.t.runtime_checkable
class SupportsEqual(__common.t.Protocol[_T]):
    def __eq__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsNotEqual(__common.t.Protocol[_T]):
    def __ne__(self, /, other) -> bool: ...
@__common.t.runtime_checkable
class SupportsEqNe(__common.t.Protocol[_T]):
    def __eq__(self, /, other) -> bool: ...
    def __ne__(self, /, other) -> bool: ...

@__common.t.runtime_checkable
class SupportsEqNeLtGtLeGe(__common.t.Protocol[_T]):
    def __eq__(self, /, other) -> bool: ...
    def __ne__(self, /, other) -> bool: ...
    def __gt__(self, /, other) -> bool: ...
    def __lt__(self, /, other) -> bool: ...
    def __ge__(self, /, other) -> bool: ...
    def __le__(self, /, other) -> bool: ...
SupportsRichcomparisons = SupportsEqNeLtGtLeGe
